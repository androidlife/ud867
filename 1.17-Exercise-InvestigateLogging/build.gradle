/*

In this series of exercises you'll be exploring how Gradle handles various
logging outputs during the build process. We'll look at how to add logging
statements to your build as well as how to use the various command line
options to adjust the amount of logging output we receive.

Exercises:

1. Add logging statements at the beginning and end of the task action for
   the HelloTask at the INFO level.
2. Execute the "hello" task with the appropriate command line options such
   that our newly added logging statements are shown in the console output.
3. Modify the `println()` call in our task action to instead be a logging
   statement at the LIFECYCLE level.
4. Execute the "hello" task and confirm the output.
5. Execute the "hello" task with the appropriate command line options such
   that the text "Hello World" is no longer written to the console output.
6. Uncomment and run the "derpy" task below, then use "--stacktrace" to find
   the error.
7. CHALLENGE! Log "Catch me if you can" at DEBUG level, then use grep (or
    findstr on Windows) to find that message in the logs.

*/

task hello(type: HelloTask)
// gradle hello -i to show info message
/*
  gradle hello -d 
  executes the task with all the log messages
  grep: grep command is finding out text or pattern in a text or a file

  gradle hello -d = some command or spit out some output
  gradle hello -d | grep "Catch me if you can"
  | = piping , which is simply stating that execute that command and spit out or push the output to 
   grep
   So the output of gradle hello -d becomes input to grep now
   grep "someText" , now will begin to search the text in that input or not
   If found shows the output else doesn't show any output

   so if you want to see what are quiet messages 
   gradle hello -d | grep "QUIET"
   or for lifecycle
   gradle hello -d | grep "LIFECYCLE"
*/
class HelloTask extends DefaultTask {
    @TaskAction
    void doAction() {
      logger.info("*** Start doAction ****")
      println 'Hello World as Quiet'
      logger.lifecycle 'Hello World LifeCycle'
      logger.debug "Catch me if you can"
      logger.info("--- Stop doAction ----")
    }
}


task derpy << {
    //primp "Herp de derp"
    print "Herp de derp"
}

